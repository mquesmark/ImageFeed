import XCTest

final class ImageFeed_UITests: XCTestCase {
    private let app = XCUIApplication()
    private let loginData = LoginData()
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        app.launch()
        print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    }
    
    func testAuth() throws {
        XCTAssertTrue(app.buttons["Authenticate"].waitForExistence(timeout: 20))
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ Authenticate –ø–æ—è–≤–∏–ª–∞—Å—å")
        app.buttons["Authenticate"].tap()
        print("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Authenticate")
        
        let webView = app.webViews["UnsplashWebView"]
        XCTAssertTrue(webView.waitForExistence(timeout: 5))
        print("‚úÖ –í–µ–±-–≤—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
        
        let loginTextField = webView.descendants(matching: .textField).element
        XCTAssertTrue(loginTextField.waitForExistence(timeout: 5))
        print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–æ")
        loginTextField.tap()
        print("üëÜ –¢–∞–ø –ø–æ –ø–æ–ª—é –ª–æ–≥–∏–Ω–∞")
        loginTextField.typeText(loginData.login)
        print("üì© –í–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω")
        if app.toolbars.buttons["Next"].exists {
            app.toolbars.buttons["Next"].tap()
            print("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Next –Ω–∞ —Ç—É–ª–±–∞—Ä–µ")
        } else {
            print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Next –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            XCTFail()
        }
        
        let passwordTextField = webView.descendants(matching: .secureTextField).element
        XCTAssertTrue(passwordTextField.waitForExistence(timeout: 5))
        print("‚úÖ –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω–æ")
        
        passwordTextField.tap()
        print("üëÜ –¢–∞–ø –ø–æ –ø–æ–ª—é –ø–∞—Ä–æ–ª—è")
        passwordTextField.typeText(loginData.password)
        print("üîê –í–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å")
        sleep(3)
        
        if app.toolbars.buttons["Done"].waitForExistence(timeout: 2) {
            app.toolbars.buttons["Done"].tap()
            print("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Done –Ω–∞ —Ç—É–ª–±–∞—Ä–µ")
        } else if app.keyboards.buttons["Done"].waitForExistence(timeout: 1) {
            app.keyboards.buttons["Done"].tap()
            print("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Done –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        } else {
            print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Done –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        }
        
        
        let loginButton = webView.buttons["Login"]
        XCTAssertTrue(loginButton.waitForExistence(timeout: 5))
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ Login –ø–æ—è–≤–∏–ª–∞—Å—å")
        loginButton.tap()
        print("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Login")
        
        let tablesQuery = app.tables
        let cell = tablesQuery.children(matching: .cell).element(boundBy: 0)
        XCTAssertTrue(cell.waitForExistence(timeout: 15))
        print("‚úÖ –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—è–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    }
    
    func testFeed() throws {
        let tablesQuery = app.tables
        
        let cell = tablesQuery.children(matching: .cell).element(boundBy: 0)
        waitToAppear(cell)
        
        cell.swipeUp(velocity: .slow)
        
        gentlePause(for: 2)
        
        let anotherCell = tablesQuery.children(matching: .cell).element(boundBy: 2)
        waitToAppear(anotherCell)
        anotherCell.swipeDown()
        
        let cellToLike = tablesQuery.children(matching: .cell).element(boundBy: 1)
        waitToAppear(cellToLike)
        
        let likeButton = cellToLike.buttons["likeButton"]
        waitToAppear(likeButton)
        
        
        likeButton.tap()
        
        
        gentlePause(for: 10)
        
        let dislikeButton = cellToLike.buttons["likeButton"]
        waitToAppear(dislikeButton, timeout: 10)
        dislikeButton.tap()
        
        gentlePause(for: 10)
        
        let cellImage = cellToLike.images.firstMatch
        print("üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
        if cellImage.exists && cellImage.isHittable {
            print("üì∏ –¢–∞–ø –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
            cellImage.tap()
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–∞–ø–Ω—É—Ç—å –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
            XCTFail()
        }
        
        gentlePause(for: 2)
        
        let image = app.scrollViews.images.element(boundBy: 0)
        XCTAssertTrue(image.waitForExistence(timeout: 10))
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
        
        print("üîç –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        image.pinch(withScale: 3, velocity: 1)
        print("üîé –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        image.pinch(withScale: 0.5, velocity: -1)
        
        let backButton = app.buttons["backButton"]
        print("üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥")
        backButton.tap()
        print("üëà –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
    }
    
    
    func testProfile() throws {
        let tablesQuery = app.tables
        XCTAssertTrue(tablesQuery.element.waitForExistence(timeout: 20))
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ")
        app.tabBars.buttons.element(boundBy: 1).tap()
        print("üëÜ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ü—Ä–æ—Ñ–∏–ª—å")
        XCTAssertTrue(app.staticTexts["–ú–∞–∫—Å–∏–º –ì–≤–∞–∑–∞–≤–∞"].exists)
        XCTAssertTrue(app.staticTexts["@mquesmark"].exists)
        print("‚úÖ –ò–º—è –∏ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
        
        app.buttons["exitButton"].tap()
        print("üëÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
        
        app.alerts["confirmLogoutAlert"].scrollViews.otherElements.buttons["–î–∞"].tap()
        print("üëÜ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
        
        XCTAssertTrue(app.buttons["Authenticate"].waitForExistence(timeout: 20))
        print("‚úÖ –ü–æ—è–≤–∏–ª—Å—è —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    }
    
    
    // MARK: - Helpers
    
    struct LoginData {
        let login = "maximgv@icloud.com"
        let password = "dontStealMyPassword19122002" // –Ø —Å–ª—É—á–∞–π–Ω–æ –∑–∞–ø—É—à–∏–ª –Ω–∞ github —Å–≤–æ–π –ø–∞—Ä–æ–ª—å, –Ω–æ —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è unsplash, –Ω–∏–≥–¥–µ –Ω–µ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø—É—Å—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–≤—å—é –æ—Å—Ç–∞–µ—Ç—Å—è. –ê–∫–∫–∞—É–Ω—Ç –º–Ω–µ —Ç–∞–º –µ—Å–ª–∏ —á—Ç–æ –Ω–µ –∂–∞–ª–∫–æ))
    }
    private func waitToAppear(_ element: XCUIElement, timeout: TimeInterval = 5) {
        let predicate = NSPredicate(format: "exists == true")
        expectation(for: predicate, evaluatedWith: element)
        waitForExpectations(timeout: timeout) { _ in
            print("Element \(element) appeared. Yay")
        }
    }
    
    private func gentlePause(for seconds: TimeInterval) {
        let expectation = expectation(description: "Gentle pause")
        DispatchQueue.main.asyncAfter(deadline: .now() + seconds) {
            expectation.fulfill()
        }
        wait(for: [expectation], timeout: seconds + 1)
    }
}
